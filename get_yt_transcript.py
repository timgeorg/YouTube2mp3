{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# -*- coding: utf-8 -*-\n",
    "\"\"\"\n",
    "Created on Sun Feb  7 19:08:09 2021\n",
    "@author: I Kit Cheng\n",
    "\n",
    "Title: get_youtube_transcript.py\n",
    "\n",
    "Description: get transcript (auto-generated) from any youtube video.\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "import pandas as pd\n",
    "from time import sleep\n",
    "import os\n",
    "from selenium import webdriver # for interacting with website\n",
    "\n",
    "def open_url_in_chrome(url, mode='headed'):\n",
    "    #print(f'Opening {url}')\n",
    "    if mode == 'headed':\n",
    "        driver = webdriver.Chrome()\n",
    "    elif mode == 'headless':   \n",
    "        options = webdriver.ChromeOptions()\n",
    "        options.add_argument('--headless')\n",
    "        driver = webdriver.Chrome('./chromedriver.exe', options=options)\n",
    "    \n",
    "    driver.get(url)\n",
    "    return driver\n",
    "\n",
    "def accept_T_and_C(driver):\n",
    "    # Click 'No thanks'\n",
    "    driver.find_element_by_xpath(\"//paper-button[@aria-label='No thanks']\").click()\n",
    "    \n",
    "    # Click 'I agree' https://stackoverflow.com/questions/64846902/how-to-get-rid-of-the-google-cookie-pop-up-with-my-selenium-automation\n",
    "    driver.switch_to.frame(driver.find_element_by_xpath(\"//iframe[contains(@src, 'consent.google.com')]\"))\n",
    "    sleep(1)\n",
    "    driver.find_element_by_xpath('//*[@id=\"introAgreeButton\"]/span/span').click()\n",
    "    sleep(3)\n",
    "    driver.refresh()\n",
    "    \n",
    "def get_transcript(driver, mode):\n",
    "    \n",
    "    driver.implicitly_wait(10)\n",
    "    \n",
    "    if mode=='headed':\n",
    "        try:\n",
    "            print('Accepting Terms and Conditions')\n",
    "            accept_T_and_C(driver)\n",
    "        except:\n",
    "            print(\"No T&Cs to accept.\")\n",
    "        \n",
    "        print(\"Opening transcript\")\n",
    "        # Click 'More actions'\n",
    "        driver.find_element_by_xpath(\"//button[@aria-label='More actions']\").click() \n",
    "        \n",
    "        # Click 'Open transcript'\n",
    "        driver.find_element_by_xpath(\"//*[@id='items']/ytd-menu-service-item-renderer/tp-yt-paper-item\").click()\n",
    "        sleep(3)\n",
    "    \n",
    "    elif mode=='headless':\n",
    "        # Click 'More actions'\n",
    "        try:\n",
    "            driver.find_elements_by_xpath(\"//button[@aria-label='More actions']\")[1].click()\n",
    "        except:\n",
    "            sleep(3)\n",
    "            driver.refresh()\n",
    "            get_transcript(driver, mode)\n",
    "        \n",
    "        # Click 'open transcript'\n",
    "        try:\n",
    "            driver.find_element_by_xpath(\"//*[@id='items']/ytd-menu-service-item-renderer/tp-yt-paper-item\").click()\n",
    "        except:\n",
    "            sleep(3)\n",
    "            driver.refresh()\n",
    "            get_transcript(driver, mode)\n",
    "    \n",
    "    # Get all transcript text\n",
    "    print(\"Copying transcript \")\n",
    "    transcript_element = driver.find_element_by_xpath(\"//*[@id='body']/ytd-transcript-segment-list-renderer\")\n",
    "    transcript = transcript_element.text\n",
    "\n",
    "    return transcript\n",
    "\n",
    "def transcript2df(transcript):\n",
    "\n",
    "    transcript = transcript.split('\\n')\n",
    "    transcript_timestamps = transcript[::2]\n",
    "    \n",
    "    transcript_text = transcript[1::2]\n",
    "    df = pd.DataFrame({'timestamp':transcript_timestamps, \n",
    "                   'text':transcript_text})\n",
    "    \n",
    "    return df\n",
    "\n",
    "def main(url, mode='headless'):\n",
    "    driver = open_url_in_chrome(url, mode)\n",
    "    \n",
    "    transcript = get_transcript(driver, mode)\n",
    "    \n",
    "    driver.close()\n",
    "    \t\n",
    "    df = transcript2df(transcript)\n",
    "    \n",
    "    # Existing list of unique ingredients\n",
    "    if not os.path.exists(\"./output\"):\n",
    "        os.makedirs(\"./output\")\n",
    "\n",
    "    print('Saving transcript ')\n",
    "    path_to_transcript = \"./output/\"\n",
    "    df.to_csv(f\"{path_to_transcript}my_transcript_timestamped.csv\", index=False) \n",
    "    with open(f\"{path_to_transcript}my_transcript_text_only.txt\", \"w\") as text_file:\n",
    "        print(\" \".join(\" \".join(df.text.values).split()), file=text_file)\n",
    "    print(f\"Transcript saved to: {path_to_transcript}\")\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    url = \"https://www.youtube.com/watch?v=5tvmMX8r_OM\"\n",
    "    mode = 'headed'\n",
    "    main(url, mode)\n",
    "    \n",
    "\n",
    "    "
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
